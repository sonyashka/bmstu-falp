; задание 1 - done
(defun my-reverse (lst &optional (buf-lst Nil))
    (cond ((null lst) buf-lst)
          (t (my-reverse (cdr lst) (cons (car lst) buf-lst)))))
; (print (my-reverse '(a b c (d e) f)))
; задание 3 - done
; (defun not-null-lst (lst)
;     (cond ((null lst) Nil)
;           ((and (listp (car lst)) (not (null (caar lst)))) (car lst))
;           (t (not-null-lst (cdr lst)))))
; (print (not-null-lst '(1 aa () n (1 3))))
; задание 4 - done
(defun append-elem (lst elem &optional (before-lst Nil))
    (cond ((and (null lst) (null before-lst)) (cons elem Nil))
          ((null lst) (my-reverse (cons elem before-lst)))
          (t (append-elem (cdr lst) elem (cons (car lst) before-lst)))))
(defun append-lst (lst1 lst2 &optional (before-lst Nil))
    (cond ((and (null lst1) (null lst2)) before-lst)
          ((not (null lst1)) (append-lst (cdr lst1) lst2 (append-elem before-lst (car lst1))))
          (t (append-lst lst1 (cdr lst2) (append-elem before-lst (car lst2))))))
; (defun get-between (num1 num2 lst &optional (res-lst Nil))
;     (cond ((null lst) res-lst)
;           ((and (numberp (car lst)) (< num1 (car lst) num2)) (get-between num1 num2 (cdr lst) 
;             (append-elem res-lst (car lst))))
;           (t (get-between num1 num2 (cdr lst) res-lst))))
; (print (get-between 1 15 '(1.384 fha 9 16)))
; задание 7 - done
; (defun all-num-mult-a (num lst &optional (res-lst Nil))
;     (cond ((null lst) res-lst)
;           (t (all-num-mult-a num (cdr lst) (append-elem res-lst (* num (car lst)))))))
; (print (all-num-mult-a 2 '(1 5.9 6 -12)))
; (defun all-num-mult-b (num lst &optional (res-lst Nil))
;     (cond ((null lst) res-lst)
;           ((numberp (car lst)) (all-num-mult-b num (cdr lst) (append-elem res-lst (* num (car lst)))))
;           ((listp (car lst)) (all-num-mult-b num (cdr lst) 
;             (append-elem res-lst (all-num-mult-b num (car lst)))))
;           (t (all-num-mult-b num (cdr lst) (append-elem res-lst (car lst))))))
; (print (all-num-mult-b 2 '(1 vja (5 -1 (0)) haf 9)))
; ; задание 8.1 - done
; (defun get-between (num1 num2 lst &optional (res-lst Nil))
;     (cond ((null lst) res-lst)
;           ((< num1 (car lst) num2) (get-between num1 num2 (cdr lst) 
;             (append-elem res-lst (car lst))))
;           (t (get-between num1 num2 (cdr lst) res-lst))))
; (defun insert-elem (lst elem &optional (before-lst Nil))
;     (cond ((and (null lst) (not (null before-lst))) (append-elem before-lst elem))
;           ((null lst) (cons elem Nil))
;           ((< elem (car lst)) (append-lst (append-elem before-lst elem) lst))
;           (t (insert-elem (cdr lst) elem (append-elem before-lst (car lst))))))
; (defun sort-elem (lst &optional (res-lst Nil))
;     (cond ((null lst) res-lst)
;           (t (sort-elem (cdr lst) (insert-elem res-lst (car lst))))))
; (defun select-between (num1 num2 lst)
;     (cond ((null lst) Nil)
;           ((> num1 num2) (sort-elem (get-between num2 num1 lst)))
;           (t (sort-elem (get-between num1 num2 lst)))))
; (print (select-between -3 10 '(8 12 3 9 1.0)))
; задание 8.2 - done
; (defun rec-add-a (lst &optional (sum 0))
;     (cond ((null lst) sum)
;           ((numberp (car lst)) (rec-add-a (cdr lst) (+ sum (car lst))))
;           (t (rec-add-a (cdr lst) sum))))
; (print (rec-add-a '(1 v 4 0)))
; (defun rec-add-b (lst &optional (sum 0))
;     (cond ((null lst) sum)
;           ((numberp (car lst)) (rec-add-b (cdr lst) (+ sum (car lst))))
;           ((listp (car lst)) (rec-add-b (cdr lst) (+ sum (rec-add-b (car lst)))))
;           (t (rec-add-b (cdr lst) sum))))
; (print (rec-add-b '(1 (b 19 (0 a)) (1.24) l)))
; задание 9 - done
; (defun recnth (ind lst &optional (cnt 0))
;     (cond ((null lst) Nil)
;           ((= cnt ind) (car lst))
;           (t (recnth ind (cdr lst) (+ cnt 1)))))
; (print (recnth 3 '(a b c (d e) f)))
; задание 10 - done
; (defun all-odd (lst)
;     (cond ((null lst) t)
;           ((and (numberp (car lst)) (evenp (car lst))) Nil)
;           ((listp (car lst)) (all-odd (car lst)))
;           (t (all-odd (cdr lst)))))
; (print (all-odd '(f a (lf a 3) 11)))
; задание 11 - done
; (defun first-num (lst)
;     (cond ((numberp (car lst)) (car lst))
;           (t (first-num (cdr lst)))))
; (defun first-odd-num (lst)
;     (cond ((null lst) Nil)
;           ((oddp (first-num lst)) (first-num lst))
;           (t (first-odd-num (cdr lst)))))
; (print (first-odd-num '(2 5 3 (ajf 1) l)))
; задание 12 - done
; (defun all-square (lst)
;     (cond ((null lst) Nil)
;           (t (cons (* (car lst) (car lst)) (all-square (cdr lst))))))
; (print (all-square '(1 2 3 4)))